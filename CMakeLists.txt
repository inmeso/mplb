cmake_minimum_required(VERSION 3.18)
project(MPLB C CXX)
option(VERBOSE "Turn on verbose warning messages" OFF)
option(OPTIMISE "Turn on optimised mode" OFF)
#option(TEST "Turn on tests for Apps" OFF)
if (NOT VERBOSE)
    message("We show concise compiling information by defautl! Use -DVERBOSE=ON to switch on.")
endif()
if (NOT OPTIMISE)
    message("We use the development mode by defautl! Use -DOPTIMISE=ON to use the optimised mode.")
endif()
set(CMAKE_VERBOSE_MAKEFILE ${VERBOSE})
set(LibDir ${CMAKE_SOURCE_DIR}/Src)
# Use the Release mode by default
if ( NOT CMAKE_BUILD_TYPE )
    message("We choose the Release mode! Please uses -DCMAKE_BUILD_TYPE to change.")
    set(CMAKE_BUILD_TYPE Release)
endif()
# Configure Compilers
# C
set(CMAKE_C_STANDARD 99)
#TODO:Shall we keep the "-g" in the release mode? It increases file size.
if (${CMAKE_C_COMPILER_ID} STREQUAL GNU)
    set(CMAKE_C_FLAGS "-fPIC -Wall")
    set(CMAKE_C_FLAGS_RELEASE "-O3")
    set(CMAKE_C_FLAGS_DEBUG "-O0 -g")
elseif (${CMAKE_C_COMPILER_ID} STREQUAL Clang)
    set(CMAKE_C_FLAGS "-fPIC -DUNIX -Wall")
    set(CMAKE_C_FLAGS_RELEASE "-O3")
    set(CMAKE_C_FLAGS_DEBUG "-g -O0")
elseif (${CMAKE_C_COMPILER_ID} STREQUAL MSVC)
    set(CMAKE_C_FLAGS "-W1")
    set(CMAKE_C_FLAGS_RELEASE "/O2 /Ot ")
    set(CMAKE_C_FLAGS_DEBUG "/Z7 /DEBUG")
elseif (${CMAKE_C_COMPILER_ID} STREQUAL Intel)
    set(CMAKE_C_FLAGS "-xHost")
    set(CMAKE_C_FLAGS_RELEASE "-O3")
    set(CMAKE_C_FLAGS_DEBUG "-O0 -g")
else ()
    message(FATAL_ERROR "We can't recongnise the C compiler!")
endif ()

# C++
set(CMAKE_CXX_STANDARD 11)
if (${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
    set(CMAKE_CXX_FLAGS "-fPIC -Wall")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
    set(CMAKE_CXX_FLAGS "-fPIC -DUNIX -Wall")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
    set(CMAKE_CXX_FLAGS "-W1")
    set(CMAKE_CXX_FLAGS_RELEASE "/O2 /Ot ")
    set(CMAKE_CXX_FLAGS_DEBUG "/Z7 /DEBUG")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL Intel)
    set(CMAKE_CXX_FLAGS "-xHost")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
    set(CMAKE_CXX_FLAGS_DEBUG " -O0 -g -DOPS_DEBUG ")
else ()
    message(FATAL_ERROR "We can't recongnise the C++ compiler!")
endif ()

if (CFLAG)
    SET(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} ${CFLAG}")
else ()
    message("Extra C compiler options by using CFLAG, e.g., -DCFLAG=\"-ffloat-store\" for GNU!")
endif ()

if (CXXFLAG)
    SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${CXXFLAG}")
else ()
    message("Extra C++ compiler options by using CXXFLAG, e.g., -DCXXFLAG=\"-ffloat-store\" for GNU!")
endif ()
# Try to find the required dependency
set(HDF5_PREFER_PARALLEL true)
find_package(MPI QUIET)
find_package(HDF5 QUIET COMPONENTS C HL)
find_package(OPS PATHS ${OPS_DIR}/lib/cmake)
# Configure the "include" dir for compiling
if (HDF5_FOUND)
    include_directories(${HDF5_INCLUDE_DIRS})
else()
    message (WARNING "We cannot find the parallel HDF5 library. The HDF5 IO routines won't work! Please use -DHDF5_ROOT to specify the path!")
endif ()
if (MPI_FOUND)
    include_directories(${MPI_C_INCLUDE_DIRS})
    include_directories(${MPI_CXX_INCLUDE_DIRS})
else()
    message (WARNING "We cannot find a MPI environment! The MPI codes won't compile!")
endif ()
if (OPTIMISE)
    find_package(CUDAToolkit QUIET)
    find_package(OpenACC QUIET)
    find_package(OpenCL QUIET)
    find_package(OpenMP QUIET)
    find_package(Python2 QUIET)
    if (NOT Python2_FOUND)
        message (FATAL_ERROR "We cannot find Python2 and the Python translator needs Python2! Please use -DPython2_EXECUTABLE to specify the path.")
    else()
        FIND_PATH (opsc NAMES "ops.py" PATHS ${SEARCH_PATHS} PATH_SUFFIXES bin/ops_translator/c)
        FIND_PATH (opsfortran NAMES "ops_fortran.py" PATHS ${SEARCH_PATHS} PATH_SUFFIXES bin/ops_translator/fortran)
        if (NOT opsc)
            message (FATAL_ERROR "We cannot find the python C/C++ translator!")
        endif()
        if (NOT opsfortran)
            message (FATAL_ERROR "We cannot find the python fortran translator!")
        endif()
        set(OPS_C_TRANSLATOR  "${opsc}/ops.py")
        set(OPS_F_TRANSLATOR  "${opsfortran}/ops_fortran.py")
    endif () # python2

    if (CUDAToolkit_FOUND)
        include_directories(${CUDAToolkit_INCLUDE_DIRS})
        set(CMAKE_CUDA_COMPILER ${CUDAToolkit_NVCC_EXECUTABLE})
        enable_language(CUDA)
    else()
        message (WARNING "We cannot find a CUDA kit! The CUDA codes won't compile!")
    endif ()

    if (OpenCL_FOUND)
        include_directories(${OpenCL_INCLUDE_DIRS})
    else()
        message (WARNING "We cannot find a OpenCL kit! The OpenCL codes won't compile!")
    endif ()
endif () # optimise


set(HDF5_SEQ ${HDF5_FOUND})
if (OPTIMISE)
    if (ops_cuda_FOUND)
        set(CUDA ${CUDAToolkit_FOUND})
    endif()
    if (ops_opencl_FOUND)
        set(OPENCL ${OpenCL_FOUND})
    endif()
endif()

if (MPI_FOUND)
    set(MPI TRUE)
    set(HDF5_MPI ${HDF5_FOUND})
    if (OPTIMISE)
        if (ops_cuda_FOUND)
            set(CUDA_MPI ${CUDAToolkit_FOUND})
        endif()
        if (ops_opencl_FOUND)
            set(OPENCL_MPI ${OpenCL_FOUND})
        endif()
    endif()
endif()
#prepare ctest
if (TEST)
    enable_testing()
    include(ProcessorCount)
    ProcessorCount(CPU_NUMBER)
    if(CPU_NUMBER GREATER 12)
        set(CPU_NUMBER 12)
    endif()
    if (NOT GPU_NUMBER)
        message(WARNING "GPU tests are disabled! Please use -DGPU_NUMBER to specify!")
    endif()
endif()

include_directories(${LibDir})
set(LibSrc ${LibDir}/evolution3d.cpp ${LibDir}/scheme.cpp ${LibDir}/scheme_wrapper.cpp ${LibDir}/configuration.cpp ${LibDir}/model.cpp ${LibDir}/model_wrapper.cpp ${LibDir}/block.cpp ${LibDir}/flowfield.cpp ${LibDir}/flowfield_wrapper.cpp ${LibDir}/boundary.cpp ${LibDir}/boundary_wrapper.cpp)

# clean the tmp directory for the code generation
macro(CreateTempDir)
    file(REMOVE_RECURSE "${CMAKE_CURRENT_BINARY_DIR}/tmp")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/tmp" )
endmacro()
add_subdirectory(Apps/3DCavity)
add_subdirectory(Apps/3DLChannel)

